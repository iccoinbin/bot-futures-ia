import yaml, pandas as pd
from src.features.ta_v31 import build_features
from src.strategies.orchestrator_v31 import run_backtest_orchestrated

if __name__ == "__main__":
    cfg = yaml.safe_load(open("config/settings_v31.yml"))
    tf = cfg["timeframe"]; days = cfg["history_days"]
    for sym in cfg["symbols"]:
        in_file = f"data/{sym}_{tf}_{days}d.csv"
        df = pd.read_csv(in_file, parse_dates=["open_time","close_time"])
        inds = cfg["indicators"]
        df_feat = build_features(df, inds["ema_fast"], inds["ema_slow"], inds["atr_period"], inds["adx_period"], inds["vwap_window"])
        res = run_backtest_orchestrated(df_feat, cfg)
        from math import fabs
pos = sum(t for t in res.get('trades', []) if t>0)
neg = -sum(t for t in res.get('trades', []) if t<0)
pf = (pos / (neg if neg>1e-9 else 1e-9))
avg = (sum(res.get("trades", []))/len(res.get("trades", []))) if res.get("trades", []) else 0.0
from math import fabs
trades_raw = res.get("trades", [])
trades_vals = []
for t in trades_raw:
    if isinstance(t, dict) and "pnl" in t:
        try:
            trades_vals.append(float(t["pnl"]))
        except Exception:
            continue
    else:
        try:
            trades_vals.append(float(t))
        except Exception:
            continue
pos = sum(x for x in trades_vals if x > 0)
neg = -sum(x for x in trades_vals if x < 0)
pf = (pos / (neg if neg > 1e-9 else 1e-9)) if trades_vals else 0.0
avg = (sum(trades_vals)/len(trades_vals)) if trades_vals else 0.0

# ==== resumo robusto (aceita número ou dict) ====
def _extract_pnls(trades_raw):
    vals = []
    for t in trades_raw:
        # já numérico
        if isinstance(t, (int, float)):
            vals.append(float(t)); continue
        # dicionário: tente diferentes chaves comuns
        if isinstance(t, dict):
            for k in ("pnl","pnl_usdt","profit","pl","result","ret"):
                if k in t:
                    try:
                        vals.append(float(t[k]))
                        break
                    except Exception:
                        pass
    return vals

trades_raw = res.get("trades") or res.get("trade_log") or res.get("executions") or []
trades_vals = _extract_pnls(trades_raw)
wins = sum(1 for x in trades_vals if x > 0)
losses = sum(1 for x in trades_vals if x <= 0)
pos = sum(x for x in trades_vals if x > 0.0)
neg = -sum(x for x in trades_vals if x < 0.0)
pf = (pos / (neg if neg > 1e-9 else 1e-9)) if trades_vals else 0.0
avg = (sum(trades_vals) / len(trades_vals)) if trades_vals else 0.0
print(f"{sym}: PnL {res.get('pnl_total',0.0):.2f} | Trades {len(trades_vals)} | Wins {wins} | Losses {losses} | Avg {avg:.4f} | PF {pf:.2f}")
print("DEBUG first_trades:", trades_raw[:3])
# ================================================
