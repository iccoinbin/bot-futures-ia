import yaml, pandas as pd
from src.features.ta_v31 import build_features
from src.strategies.orchestrator_v31 import run_backtest_orchestrated

if __name__ == "__main__":
    cfg = yaml.safe_load(open("config/settings_v31.yml"))
    tf = cfg["timeframe"]; days = cfg["history_days"]
    for sym in cfg["symbols"]:
        in_file = f"data/{sym}_{tf}_{days}d.csv"
        df = pd.read_csv(in_file, parse_dates=["open_time","close_time"])
        inds = cfg["indicators"]
        df_feat = build_features(df, inds["ema_fast"], inds["ema_slow"], inds["atr_period"], inds["adx_period"], inds["vwap_window"])
        res = run_backtest_orchestrated(df_feat, cfg)
        from math import fabs
pf = (sum(t for t in res["trades"] if t>0) / max(1e-9, fabs(sum(t for t in res["trades"] if t<0)))) if res["trades"] else 0.0
avg = (sum(res["trades"])/len(res["trades"])) if res["trades"] else 0.0
print(f"{sym}: PnL {res['pnl_total']:.2f} | Trades {res['num_trades']} | Wins {res['wins']} | Losses {res['losses']} | Avg {avg:.4f} | PF {pf:.2f}")
